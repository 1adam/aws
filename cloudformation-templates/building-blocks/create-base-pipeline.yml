---
AWSTemplateFormatVersion: "2010-09-09"
Description: Create a (simple) CD pipeline, given an app name, 2 ASGs (stg/prod), and 2 TargetGroups (stg/prod)

Parameters:

  AppName:
    Type: String
    Description: "Application Name - only [a-z0-9-_]"
    AllowedPattern: "^[a-z0-9-_]+$"

  ASG:
    Type: "String"
    Description: "ID of the ASG to plonk deployments into - STG"

  TargetGroupName:
    Type: "String"
    Description: "Name of Target group to which the app will be deployed - STG"

  ASGprod:
    Type: "String"
    Description: "ID of the ASG to plonk deployments into - PROD"

  TargetGroupNamePROD:
    Type: "String"
    Description: "Name of Target group to which the app will be deployed - PROD"

  PipeIncBucketPrefix:
    Type: "String"
    Description: "prefix (path) in the bucket to poll for changes -- e.g. 'something/latest.tgz'"
    AllowedPattern: "^[-_a-zA-Z0-9/\.]+$"

Resources:

  CodeDepApp:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Ref AppName

  CodeDepGrp:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      DeploymentGroupName: !Sub "${AWS::StackName}-depGrp-stg"
      ApplicationName: !Ref AppName
      AutoScalingGroups:
        - !Ref ASG
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !Ref TargetGroupName
      ServiceRoleArn: !GetAtt CodeDepSvcRole.Arn

  CodeDepGrpPROD:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      DeploymentGroupName: !Sub "${AWS::StackName}-depGrp-prod"
      ApplicationName: !Ref AppName
      AutoScalingGroups:
        - !Ref ASGprod
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !Ref TargetGroupNamePROD
      ServiceRoleArn: !GetAtt CodeDepSvcRole.Arn

  CodeDepSvcRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-cd-svc-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref PipeIncBucket
        Type: S3
      Name: !Sub "${AWS::StackName}-pipe"
      RoleArn: !GetAtt CodePipeSvcRole.Arn
      Stages:
        - Name: GetSource
          Actions:
            - Name: get-source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref PipeIncBucket
                S3ObjectKey: !Ref PipeIncBucketPrefix
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: fetchedSource
        - Name: DoStgDeployment
          Actions:
            - Name: do-deploy-stg
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              Configuration:
                ApplicationName: !Ref CodeDepApp
                DeploymentGroupName: !Ref CodeDepGrp
              InputArtifacts:
                - Name: fetchedSource
        - Name: WaitForApproval
          Actions:
            - Name: get-approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
        - Name: DoProdDeployment
          Actions:
            - Name: do-deploy-prod
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              Configuration:
                ApplicationName: !Ref CodeDepApp
                DeploymentGroupName: !Ref CodeDepGrpPROD
              InputArtifacts:
                - Name: fetchedSource


  CodePipeSvcRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-pipe-svc-policy"
          PolicyDocument: !Sub |
            {
                "Statement": [
                    {
                        "Action": [
                            "s3:GetObject",
                            "s3:GetObjectVersion",
                            "s3:GetBucketVersioning"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "s3:PutObject"
                        ],
                        "Resource": [
                            "arn:aws:s3:::codepipeline*",
                            "arn:aws:s3:::elasticbeanstalk*"
                        ],
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "codecommit:CancelUploadArchive",
                            "codecommit:GetBranch",
                            "codecommit:GetCommit",
                            "codecommit:GetUploadArchiveStatus",
                            "codecommit:UploadArchive"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "codedeploy:CreateDeployment",
                            "codedeploy:GetApplicationRevision",
                            "codedeploy:GetDeployment",
                            "codedeploy:GetDeploymentConfig",
                            "codedeploy:RegisterApplicationRevision"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "elasticbeanstalk:*",
                            "ec2:*",
                            "elasticloadbalancing:*",
                            "autoscaling:*",
                            "cloudwatch:*",
                            "s3:*",
                            "sns:*",
                            "cloudformation:*",
                            "rds:*",
                            "sqs:*",
                            "ecs:*",
                            "iam:PassRole"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "lambda:InvokeFunction",
                            "lambda:ListFunctions"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "opsworks:CreateDeployment",
                            "opsworks:DescribeApps",
                            "opsworks:DescribeCommands",
                            "opsworks:DescribeDeployments",
                            "opsworks:DescribeInstances",
                            "opsworks:DescribeStacks",
                            "opsworks:UpdateApp",
                            "opsworks:UpdateStack"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "cloudformation:CreateStack",
                            "cloudformation:DeleteStack",
                            "cloudformation:DescribeStacks",
                            "cloudformation:UpdateStack",
                            "cloudformation:CreateChangeSet",
                            "cloudformation:DeleteChangeSet",
                            "cloudformation:DescribeChangeSet",
                            "cloudformation:ExecuteChangeSet",
                            "cloudformation:SetStackPolicy",
                            "cloudformation:ValidateTemplate",
                            "iam:PassRole"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "codebuild:BatchGetBuilds",
                            "codebuild:StartBuild"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    }
                ],
                "Version": "2012-10-17"
            }

  PipeIncBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref AppName
          - "pipe"
          - "inc"
          - "bkt"
      AccessControl: "Private"
      VersioningConfiguration:
        Status: Enabled

Outputs:

  UploadBucket:
    Value: !Ref PipeIncBucket