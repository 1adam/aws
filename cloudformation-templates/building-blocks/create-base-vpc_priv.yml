---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a VPC with 2 public and 2 private subnets (1 of each type in 2 AZs), 2 NAT instances for egress traffic, and a Bastion host (in an ASG) beind an LB."

Parameters:

  VPCcidr:
    Type: String
    Description: "CIDR Block for the VPC."
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\/(\\d{1,2})"
    Default: "10.20.0.0/16"

  SNcidrs:
    Type: CommaDelimitedList
    Description: "Comma-delimited list of four CIDR blocks for the subnets (2 pub, 2 priv in diff AZs).  These must fall within the VPC CIDR block, and not overlap."
    Default: "10.20.0.0/24, 10.20.1.0/24, 10.20.2.0/24, 10.20.3.0/24"

  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of the KeyPair that will be used to connect to the instances"

  NATimage:
    Type: "AWS::EC2::Image::Id"
    Description: "NAT AMI ID"

  BastionImage:
    Type: "AWS::EC2::Image::Id"
    Description: "Bastion host AMI ID"

  MgmtIP:
    Type: "String"
    Description: "IP Address (not CIDR) for remote ssh access to NAT instances"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    MinLength: 7
    MaxLength: 15

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCcidr
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-vpc"

  Subnet1pub:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Sub "${AWS::Region}"
      CidrBlock: !Select
        - 0
        - !Ref SNcidrs
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn1pub"

  Subnet1priv:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Sub "${AWS::Region}"
      CidrBlock: !Select
        - 1
        - !Ref SNcidrs
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn1priv"

  Subnet2pub:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Sub "${AWS::Region}"
      CidrBlock: !Select
        - 2
        - !Ref SNcidrs
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn2pub"

  Subnet2priv:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Sub "${AWS::Region}"
      CidrBlock: !Select
        - 3
        - !Ref SNcidrs
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn2priv"

  VPCigw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  IGWattach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref VPCigw
      VpcId: !Ref VPC

  RouteTablePub:
    DependsOn: VPC
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-pub"

  RouteTablePriv1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-priv1"

  RouteTablePriv2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-priv2"

  PubRoute:
    DependsOn: RouteTablePub
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref VPCigw
      RouteTableId: !Ref RouteTablePub

  PrivRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NetworkInterfaceId: !Ref NAT1eni
      RouteTableId: !Ref RouteTablePriv1

  PrivRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NetworkInterfaceId: !Ref NAT2eni
      RouteTableId: !Ref RouteTablePriv2

  Subnet1RTassocPub:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref Subnet1pub

  Subnet1RTassocPriv:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePriv1
      SubnetId: !Ref Subnet1priv

  Subnet2RTassocPub:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref Subnet2pub

  Subnet2RTassocPriv:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePriv2
      SubnetId: !Ref Subnet2priv

  NAT1eni:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Used by the 1st NAT instance"
      GroupSet:
        - !Ref NAT1SecGrp
      SourceDestCheck: false
      SubnetId: !Ref Subnet1pub
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat1eni"

  NAT2eni:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Used by the 2nd NAT instance"
      GroupSet:
        - !Ref NAT2SecGrp
      SourceDestCheck: false
      SubnetId: !Ref Subnet2pub
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat2eni"

  NAT1SecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-nat1SG"
      GroupDescription: "For the NAT instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Select
            - 1
            - !Ref SNcidrs
          Description: "Allow passthru traffic - priv1"
          IpProtocol: -1

  NAT2SecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-nat2SG"
      GroupDescription: "For the NAT instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Select
            - 3
            - !Ref SNcidrs
          Description: "Allow passthru traffic - priv2"
          IpProtocol: -1

  BHSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-bhSG"
      GroupDescription: "For the Bastion host"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Sub "${MgmtIP}/32"
          Description: "Allow ssh from Management IP"
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22

  PrivInstSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-privSG"
      GroupDescription: "Control access to instances in the private subnets"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BHSecGrp
          Description: "Allow ssh from Bastion instance"
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22

  BHLaunchCfg:
    DependsOn: VPCigw
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref BHinstanceProfile
      ImageId: !Ref BastionImage
      InstanceMonitoring: false
      InstanceType: 't2.nano'
      SecurityGroups:
        - !Ref BHSecGrp

  NAT1LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-nat1lt"
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref NATinstanceProfile
        ImageId: !Ref NATimage
        InstanceInitiatedShutdownBehavior: 'terminate'
        InstanceType: 't2.nano'
        KeyName: !Ref KeyPair
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - DeleteOnTermination: false
            Description: "NAT1 ENI"
            DeviceIndex: 0
            NetworkInterfaceId: !Ref NAT1eni

  NAT2LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-nat2lt"
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref NATinstanceProfile
        ImageId: !Ref NATimage
        InstanceInitiatedShutdownBehavior: 'terminate'
        InstanceType: 't2.nano'
        KeyName: !Ref KeyPair
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - DeleteOnTermination: false
            Description: "NAT2 ENI"
            DeviceIndex: 0
            NetworkInterfaceId: !Ref NAT2eni

  NATinstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-nat-instprof"
      Roles:
        - !Ref NATinstanceRole

  NATinstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-NATinstRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"

  BHinstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-bh-instprof"
      Roles:
        - !Ref BHinstanceRole

  BHinstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-BHinstRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"

  BHTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${AWS::StackName}-tg"
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 22
      Protocol: TCP
      VpcId: !Ref VPC

  BHLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: "load_balancing.cross_zone.enabled"
          Value: true
      Name: !Sub "${AWS::StackName}-lb"
      Scheme: "internet-facing"
      Subnets:
        - !Ref Subnet1pub
        - !Ref Subnet2pub
      Type: network
      IpAddressType: ipv4

  BHLBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BHTargetGroup
          Type: forward
      LoadBalancerArn: !Ref BHLB
      Port: 22
      Protocol: TCP

  NAT1asg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: NAT1LaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-nat1asg"
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LaunchTemplate:
        LaunchTemplateName: !Sub "${AWS::StackName}-nat1lt"
        Version: 1
      AvailabilityZones:
        - !GetAtt Subnet1pub.AvailabilityZone

  NAT2asg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: NAT2LaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-nat2asg"
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LaunchTemplate:
        LaunchTemplateName: !Sub "${AWS::StackName}-nat2lt"
        Version: 1
      AvailabilityZones:
        - !GetAtt Subnet2pub.AvailabilityZone

  BHasg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-BHasg"
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LaunchConfigurationName: !Ref BHLaunchCfg
      TargetGroupARNs:
        - !Ref BHTargetGroup
      AvailabilityZones:
        - !GetAtt Subnet1pub.AvailabilityZone
        - !GetAtt Subnet2pub.AvailabilityZone
      VPCZoneIdentifier:
        - !Ref Subnet1pub
        - !Ref Subnet2pub

Outputs:

  VPCid:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  SN1PubId:
    Value: !Ref Subnet1pub
    Export:
      Name: !Sub "${AWS::StackName}-SN1pub"
  SN1PrivId:
    Value: !Ref Subnet1priv
    Export:
      Name: !Sub "${AWS::StackName}-SN1priv"
  SN2PubId:
    Value: !Ref Subnet2pub
    Export:
      Name: !Sub "${AWS::StackName}-SN2pub"
  SN2PrivId:
    Value: !Ref Subnet2priv
    Export:
      Name: !Sub "${AWS::StackName}-SN2priv"
  BHLBEndpoint:
    Value: !GetAtt BHLB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-BHLBEndpoint"
  BHSecGroup:
    Value: !Ref BHSecGrp
    Export:
      Name: !Sub "${AWS::StackName}-BHSecGrp"