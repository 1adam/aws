---
AWSTemplateFormatVersion: "2010-09-09"
Description: Create an ASG (to support a codepipeline/codedeploy deployment)

Parameters:

  CustomAMI:
    Type: "AWS::EC2::Image::Id"
    Description: "Enter the AMI ID for your base image.  This should have the CodeDeploy agent installed."

  InstType:
    Type: String
    Description: "The instance type to use - defaults to t2.nano"
    Default: 't2.nano'

  EnvType:
    Type: String
    Description: "Staging or Production?"
    AllowedValues:
    - 'stg'
    - 'prod'
    Default: 'stg'

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the keyPair for access to your system

  ManagementIp:
    Type: String
    Description: "(Optional) IP (not CIDR) to allow for management via ssh"
    MinLength: 0
    MaxLength: 18
    AllowedPattern: "((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}))?"

  VPCid:
    Type: "AWS::EC2::VPC::Id"
    Description: "Existing VPC to use"

  BHSecGrp:
    Type: "AWS::EC2::SecurityGroup::Id"
    Description: "ID of the Bastion Host's Security Group"

  PubSubnetIDs:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "At least two PUBLIC subnets that the LB will use to connect to the hosts."

  PrivSubnetIDs:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "At least two PRIVATE subnets where the hosts will reside."

  ASGminSize:
    Type: String
    Description: "Minimum # of instances in this ASG"
    AllowedPattern: "(\\d+)"

  ASGmaxSize:
    Type: String
    Description: "Maximum # of instances in this ASG"
    AllowedPattern: "(\\d+)"

  ASGdesiredSize:
    Type: String
    Description: "Desired # of instances in this ASG"
    AllowedPattern: "(\\d+)"

Conditions:
    ProdEnv: !Equals [ !Ref EnvType, prod ]
    UseManagementIp: !Not [!Equals [ !Ref ManagementIp, ""]]

Resources:

  SecGrp:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: LBSecGrp
    Properties:
      GroupName: !Sub "${AWS::StackName}-secgrp"
      GroupDescription: !Sub "SecGrp for ${AWS::StackName}"
      VpcId: !Ref VPCid
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LBSecGrp
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref BHSecGrp
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  LBSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-lb-secgrp"
      GroupDescription: !Sub "SecGrp for ${AWS::StackName}-lb"
      VpcId: !Ref VPCid
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp

  LaunchCfg:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref CustomAMI
      InstanceMonitoring: false
      InstanceType: !Ref InstType
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref SecGrp

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2InstanceRole
      InstanceProfileName: !Sub "${AWS::StackName}-instprofile"

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      RoleName: !Sub "${AWS::StackName}-instrole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${AWS::StackName}-tg"
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCid

  LB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${AWS::StackName}-lb"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref LBSecGrp
      Subnets: !Ref PubSubnetIDs
      Type: application
      IpAddressType: ipv4

  LBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LB
      Port: 80
      Protocol: HTTP

  LBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref LBListener
      Priority: 1

  ASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      Cooldown: 180
      DesiredCapacity: !Ref ASGdesiredSize
      MinSize: !Ref ASGminSize
      MaxSize: !Ref ASGmaxSize
      HealthCheckGracePeriod: 180
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchCfg
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: !Ref PrivSubnetIDs

Outputs:

  HTTPEndpoint:
    Value: !GetAtt LB.DNSName
  TGname:
    Value: !GetAtt TargetGroup.TargetGroupName
  ASGname:
    Value: !Ref ASG