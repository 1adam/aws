---
AWSTemplateFormatVersion: "2010-09-09"

Description: "This template deploys a VPC, with public and private subnets.  It also deploys an Internet Gateway, with a default route on the public subnet.  It also deploys a NAT Gateway, with a default route for it in the private subnet.  Additionally, 5 VMs are created: jumpbox (in pub net), management, swarm-manager, swarm-worker1, swarm-worker2."

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet
        Type: String
        Default: 10.192.10.0/24

    PrivateSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet
        Type: String
        Default: 10.192.20.0/24

    ManagementSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the management subnet
        Type: String
        Default: 10.192.50.0/24

    ManagementInstanceIP:
        Description: Please enter the private IP address for the management instance (this must be within the management subnet cidr)
        Type: String
        Default: 10.192.50.100

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet

    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PrivateSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet

    ManagementSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref ManagementSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Management Subnet

    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet

    ManagementSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref ManagementSubnet

    PubSecGrp:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub SecurityGroup for ${EnvironmentName}
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 22
                  ToPort: 22
                  IpProtocol: tcp
            VpcId: !Ref VPC

    PrivSecGrp:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub SecurityGroup for ${EnvironmentName}
            SecurityGroupIngress:
                - CidrIp: !Ref VpcCIDR
                  FromPort: 22
                  ToPort: 22
                  IpProtocol: tcp
            VpcId: !Ref VPC

    jumpBox:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs ]
            SubnetId: !Ref PublicSubnet
            ImageId: ami-cd0f5cb6
            KeyName: nuKP
            InstanceType: t2.nano
            SecurityGroupIds:
              - !Ref PubSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-jumpbox

    EC2management:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs ]
            SubnetId: !Ref ManagementSubnet
            ImageId: ami-cd0f5cb6
            KeyName: nuKP
            PrivateIpAddress: !Ref ManagementInstanceIP
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-management

    SwarmManager:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs ]
            SubnetId: !Ref PrivateSubnet
            ImageId: ami-cd0f5cb6
            KeyName: nuKP
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-manager

    SwarmWorker1:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs ]
            SubnetId: !Ref PrivateSubnet
            ImageId: ami-cd0f5cb6
            KeyName: nuKP
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-worker-1

    SwarmWorker2:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs ]
            SubnetId: !Ref PrivateSubnet
            ImageId: ami-cd0f5cb6
            KeyName: nuKP
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-worker-2

Outputs:

    ManagementInstanceIP:
        Description: The IP of the management host
        Value: !GetAtt EC2management.PrivateIp

    JumpBoxIP:
        Description: The IP of the host in the public network
        Value: !GetAtt jumpBox.PublicIp

    SwarmManagerIP:
        Description: The IP of the swarm manager
        Value: !GetAtt SwarmManager.PrivateIp

    SwarmWorker1IP:
        Description: The IP of the swarm worker1
        Value: !GetAtt SwarmWorker1.PrivateIp

    SwarmWorker2IP:
        Description: The IP of the swarm worker2
        Value: !GetAtt SwarmWorker2.PrivateIp
