---
AWSTemplateFormatVersion: "2010-09-09"

Description: "This template deploys a VPC, with public and private subnets.  It deploys an Internet Gateway, default route on the pub subnet.  It also deploys a NAT gateway in the pub subnet, with a default route for it in the priv subnet.  Additionally, 5 EC2 instances are created: in the pub net, jumpBox, and in the priv net; management, swarm-manager, swarm-worker1, swarm-worker2.  On the management box, a base ansible installation is configured, and a docker-swarm role is ready to be applied to the swarm- nodes.  Note that the ansible inventory is built by this template - it does not exist in the default repo."

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet
        Type: String
        Default: 10.192.10.0/24

    PrivateSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet
        Type: String
        Default: 10.192.20.0/24

    ManagementSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the management subnet
        Type: String
        Default: 10.192.50.0/24

    ManagementInstanceIP:
        Description: Please enter the private IP address for the management instance (this must be within the management subnet cidr)
        Type: String
        Default: 10.192.50.100

    RsaPrivKey:
        Description: Please enter the RSA Private Key to install on the management instance
        Type: String

    DefaultAZ:
        Description: Please enter the availability zone in which everything will be created
        Type: String
        Default: us-east-1a

    InstanceImageId:
        Description: AMI ID to use for the instances
        Type: String
        Default: "ami-cd0f5cb6"

    InstanceKeyName:
        Description: Please provide the name of an EC2 keypair to use with the instances
        Type: String

    GithubAnsibleBase:
        Description: Please enter the https git clone url for the base ansible install (/etc/ansible)
        Type: String
        Default: "https://github.com/1adam/ansible.git"

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref DefaultAZ
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet

    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref DefaultAZ
            CidrBlock: !Ref PrivateSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet

    ManagementSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref DefaultAZ
            CidrBlock: !Ref ManagementSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Management Subnet

    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet

    ManagementSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref ManagementSubnet

    PubSecGrp:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub SecurityGroup for ${EnvironmentName}
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 22
                  ToPort: 22
                  IpProtocol: tcp
            VpcId: !Ref VPC

    PrivSecGrp:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub SecurityGroup for ${EnvironmentName}
            SecurityGroupIngress:
                - CidrIp: !Ref VpcCIDR
                  FromPort: 1
                  ToPort: 65535
                  IpProtocol: tcp
            VpcId: !Ref VPC

    jumpBox:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Ref DefaultAZ
            SubnetId: !Ref PublicSubnet
            ImageId: !Ref InstanceImageId
            KeyName: !Ref InstanceKeyName
            InstanceType: t2.nano
            SecurityGroupIds:
              - !Ref PubSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-jumpbox
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -ex
                    echo "${ RsaPrivKey }" > /root/.ssh/id_rsa
                    chmod 600 /root/.ssh/id_rsa
                    for hst in ${ ManagementInstance.PrivateIp } ${ SwarmManager.PrivateIp } ${ SwarmWorker1.PrivateIp } ${ SwarmWorker2.PrivateIp } ; do echo "Host $hst
                        User ubuntu
                        StrictHostKeyChecking no
                    " >> /root/.ssh/config ; done
        DependsOn:
            - ManagementInstance

    ManagementInstance:
        Type: AWS::EC2::Instance
        DependsOn:
            - SwarmManager
            - SwarmWorker1
            - SwarmWorker2
        Properties:
            AvailabilityZone: !Ref DefaultAZ
            SubnetId: !Ref ManagementSubnet
            ImageId: !Ref InstanceImageId
            KeyName: !Ref InstanceKeyName
            PrivateIpAddress: !Ref ManagementInstanceIP
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-management
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -ex
                    apt-get update
                    apt-get -y install python python-yaml python-jinja2
                    cd /opt && git clone https://github.com/ansible/ansible.git /opt/ansible
                    cd /etc && git clone "${ GithubAnsibleBase }" /etc/ansible
                    cd /etc/ansible
                    echo "[swarm-manager]
                    ${ SwarmManager.PrivateIp } 
                    [swarm-workers]
                    ${ SwarmWorker1.PrivateIp }
                    ${ SwarmWorker2.PrivateIp }
                    [swarm:children]
                    swarm-manager
                    swarm-workers
                    [swarm:vars]
                    ansible_ssh_private_key_file=/root/.ssh/id_rsa
                    ansible_ssh_user=ubuntu
                    " > /etc/ansible/inventory
                    echo "${ RsaPrivKey }" > /root/.ssh/id_rsa
                    chmod 600 /root/.ssh/id_rsa
                    for hst in ${ SwarmManager.PrivateIp } ${ SwarmWorker1.PrivateIp } ${ SwarmWorker2.PrivateIp } ; do echo "Host $hst
                        User ubuntu
                        StrictHostKeyChecking no
                    " >> /root/.ssh/config ; done
                    echo ". /opt/ansible/hacking/env-setup" >> /root/.bashrc

    SwarmManager:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Ref DefaultAZ
            SubnetId: !Ref PrivateSubnet
            ImageId: !Ref InstanceImageId
            KeyName: !Ref InstanceKeyName
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-manager
            UserData:
                !Base64 |
                    #!/bin/bash -ex
                    apt-get update
                    apt-get -y install apt-transport-https ca-certificates curl software-properties-common python
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                    apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                    apt-get update
                    apt-get -y install docker-ce

    SwarmWorker1:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Ref DefaultAZ
            SubnetId: !Ref PrivateSubnet
            ImageId: !Ref InstanceImageId
            KeyName: !Ref InstanceKeyName
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-worker-1
            UserData:
                !Base64 |
                    #!/bin/bash -ex
                    apt-get update
                    apt-get -y install apt-transport-https ca-certificates curl software-properties-common python
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                    apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                    apt-get update
                    apt-get -y install docker-ce

    SwarmWorker2:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: !Ref DefaultAZ
            SubnetId: !Ref PrivateSubnet
            ImageId: !Ref InstanceImageId
            KeyName: !Ref InstanceKeyName
            InstanceType: t2.micro
            SecurityGroupIds:
              - !Ref PrivSecGrp
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-swarm-worker-2
            UserData:
                !Base64 |
                    #!/bin/bash -ex
                    apt-get update
                    apt-get -y install apt-transport-https ca-certificates curl software-properties-common python
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                    apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                    apt-get update
                    apt-get -y install docker-ce

Outputs:

    ManagementInstanceIP:
        Description: The IP of the management host
        Value: !GetAtt ManagementInstance.PrivateIp

    JumpBoxIP:
        Description: The IP of the host in the public network
        Value: !GetAtt jumpBox.PublicIp

    SwarmManagerIP:
        Description: The IP of the swarm manager
        Value: !GetAtt SwarmManager.PrivateIp

    SwarmWorker1IP:
        Description: The IP of the swarm worker1
        Value: !GetAtt SwarmWorker1.PrivateIp

    SwarmWorker2IP:
        Description: The IP of the swarm worker2
        Value: !GetAtt SwarmWorker2.PrivateIp
